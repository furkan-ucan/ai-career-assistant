"""
Filtreleme ModÃ¼lÃ¼
Junior/entry-level pozisyonlar iÃ§in akÄ±llÄ± filtreleme iÅŸlemleri
"""

def filter_junior_suitable_jobs(jobs_list, debug=False):
    """
    Junior/Entry-level pozisyonlar iÃ§in uygun olmayan ilanlarÄ± filtreler
    YBS Ã¶ÄŸrencisinin kariyer hedefleri (ERP, Proje YÃ¶netimi, Ä°ÅŸ Analizi) gÃ¶z Ã¶nÃ¼nde bulundurularak optimizasyon
    """
    # BaÅŸlÄ±k blacklist - SADECE kesinlikle senior olanlarÄ± hedefler
    title_blacklist = [
        'senior', 'sr.', 'sr ', 'lead', 'principal', 'manager',
        'direktÃ¶r', 'mÃ¼dÃ¼r', 'chief', 'head', 'supervisor',
        'team lead', 'tech lead', 'kÄ±demli', 'baÅŸkan',
        'architect', 'baÅŸ ', 'lider', 'leader'
    ]

    # Deneyim blacklist - Sadece Ã§ok net ve yÃ¼ksek yÄ±l ifadeleri
    experience_blacklist = [
        '5+ yÄ±l', '5 yÄ±l', '5+ years', '5 years', '6+ yÄ±l', '7+ yÄ±l',
        '8+ yÄ±l', '10+ yÄ±l', 'en az 5 yÄ±l', 'minimum 5 years',
        'minimum 6', 'en az 6', 'minimum 7', 'en az 7'
    ]

    # Sorumluluk blacklist - Sadece doÄŸrudan personel yÃ¶netimi iÃ§erenler
    responsibility_blacklist = [
        'takÄ±m yÃ¶netimi', 'team management', 'personel yÃ¶netimi',
        'bÃ¼tÃ§e yÃ¶netimi', 'budget responsibility', 'iÅŸe alÄ±m', 'hiring',
        'direct reports', 'performans deÄŸerlendirme', 'team building'
    ]

    # Rol dÄ±ÅŸÄ± blacklist - Kariyer hedefleriyle ilgisiz pozisyonlar
    out_of_scope_blacklist = [
        'avukat', 'hukuk', 'legal', 'asistan', 'assistant',
        'e-ticaret', 'e-commerce', 'insan kaynaklarÄ±', 'human resources',
        'pazarlama', 'marketing', 'satÄ±ÅŸ', 'sales', 'grafik', 'graphic',
        'tasarÄ±m', 'design', 'muhasebe', 'accounting', 'finans uzmanÄ±',
        'customer service', 'mÃ¼ÅŸteri hizmetleri', 'Ã§aÄŸrÄ± merkezi',
        'gÃ¼venlik', 'security guard', 'temizlik', 'cleaning',
        'Ã§evre', 'Ã¼retim operatÃ¶r', 'fabrika', 'manufacturing operator'
    ]

    filtered_jobs = []
    filter_stats = {'title': 0, 'experience': 0, 'responsibility': 0, 'out_of_scope': 0, 'passed': 0}

    for job in jobs_list:
        title = job.get('title', '').lower()
        description = job.get('description', '').lower()

        # 1. BaÅŸlÄ±k kontrolÃ¼
        title_rejected = any(word in title for word in title_blacklist)

        # 2. Deneyim kontrolÃ¼
        experience_rejected = any(exp in description for exp in experience_blacklist)

        # 3. Sorumluluk kontrolÃ¼
        responsibility_rejected = any(resp in description for resp in responsibility_blacklist)

        # 4. Rol dÄ±ÅŸÄ± kontrol
        out_of_scope_rejected = any(word in title for word in out_of_scope_blacklist)

        # Filtreleme kararÄ±
        if title_rejected:
            filter_stats['title'] += 1
            if debug:
                print(f"ğŸ”¥ Filtrelendi (baÅŸlÄ±k): {job.get('title', 'N/A')}")
        elif experience_rejected:
            filter_stats['experience'] += 1
            if debug:
                print(f"ğŸ”¥ Filtrelendi (deneyim): {job.get('title', 'N/A')}")
        elif responsibility_rejected:
            filter_stats['responsibility'] += 1
            if debug:
                print(f"ğŸ”¥ Filtrelendi (sorumluluk): {job.get('title', 'N/A')}")
        elif out_of_scope_rejected:
            filter_stats['out_of_scope'] += 1
            if debug:
                print(f"ğŸ”¥ Filtrelendi (rol dÄ±ÅŸÄ±): {job.get('title', 'N/A')}")
        else:
            # GeÃ§ti - listeye ekle
            filtered_jobs.append(job)
            filter_stats['passed'] += 1
            if debug:
                print(f"âœ… GeÃ§ti: {job.get('title', 'N/A')}")

    # Filtreleme istatistikleri
    total_processed = len(jobs_list)
    print(f"\nğŸ“Š Filtreleme Ä°statistikleri:")
    print(f"   Toplam iÅŸlenen: {total_processed}")
    print(f"   ğŸ”¥ BaÅŸlÄ±k filtresi: {filter_stats['title']}")
    print(f"   ğŸ”¥ Deneyim filtresi: {filter_stats['experience']}")
    print(f"   ğŸ”¥ Sorumluluk filtresi: {filter_stats['responsibility']}")
    print(f"   ğŸ”¥ Rol dÄ±ÅŸÄ± filtresi: {filter_stats['out_of_scope']}")
    print(f"   âœ… GeÃ§en: {filter_stats['passed']}")
    print(f"   ğŸ“ˆ BaÅŸarÄ± oranÄ±: %{(filter_stats['passed']/total_processed)*100:.1f}")

    return filtered_jobs
