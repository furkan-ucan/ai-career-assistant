# .coderabbit.yaml - Advanced and Optimized Configuration for the "Smart Career Assistant"
# Prepared according to Coderabbit Best Practices v2.1.

# Set the default language for all reviews to English.
language: "en"

# General settings for the review process
reviews:
  # The 'chill' profile ensures that the AI focuses only on the most significant and meaningful issues.
  # 'meticulous' would comment on every minor detail, which our pre-commit hooks already handle.
  profile: "chill"

  # We don't want the AI to block PRs; it should only make comments. The final decision rests with a human.
  request_changes_workflow: false

  # NEW: Add an AI-generated summary of the changes to the top of each PR.
  high_level_summary: true

  # Automatically trigger a review when a Pull Request is opened.
  auto_review:
    enabled: true
    # NEW: Leaving 'base_branches' empty ensures that Coderabbit reviews
    # Pull Requests targeting ALL branches in the project.
    base_branches: []

    # Do not review PRs with these keywords in the title.
    ignore_title_keywords:
      - "WIP"
      - "[skip-review]"
      - "docs:"

    # Also review Draft PRs, which is great for getting early feedback.
    drafts: true

  # Exclude files that should not be reviewed by the AI to focus its energy.
  path_filters:
    - "!**/*.md"
    - "!docs/**"
    - "!data/**"
    - "!logs/**"
    - "!config.yaml"
    - "!pyproject.toml"
    - "!Makefile"
    - "!quality-check.ps1"
    - "!.gitignore"
    - "!.pre-commit-config.yaml"
    - "!tests/fixtures/**"

  # Path-specific instructions for the AI (The project's "Constitution").
  path_instructions:
    - path: "src/**/*.py"
      instructions: |
        **Role:** Senior Python Architect. Your focus is on SOLID principles, clean code, and robustness.
        - **Single Responsibility Principle (SRP):** Is this module or function doing more than one job? Pay close attention to `main.py` and `pipeline.py`.
        - **Error Handling:** Is the code safe against unexpected `None` values or empty lists? Is `logger.exception` used correctly in `except` blocks?
        - **Project Standards:** Are file paths handled using `pathlib`? Is the forbidden `print()` function used?

    - path: "tests/**/*.py"
      instructions: |
        **Role:** Senior QA Engineer. Your focus is on test quality and readability.
        - **Pytest Best Practices:** Do the tests follow best practices for `pytest` (e.g., use of fixtures, `parametrize`)?
        - **Clarity:** Does the test function's name clearly describe what it is testing?
        - **Isolation:** Are the tests independent of each other? Are mocks used correctly?

    - path: "main.py"
      instructions: |
        **Role:** System Architect. Your focus is on ensuring this file remains a simple "orchestrator."
        - Has new business logic been added to this file? If so, recommend moving it to an appropriate module under `src/`.
        - It should have no responsibilities other than parsing CLI arguments and initiating the main application workflow.

# We are disabling Coderabbit's internal linters because our pre-commit
# and CI pipeline already handle this. We want Coderabbit to focus its energy
# on finding logical, architectural, and design issues that other tools cannot.
tools:
  ruff:
    enabled: false
  shellcheck:
    enabled: false
  markdownlint:
    enabled: false
